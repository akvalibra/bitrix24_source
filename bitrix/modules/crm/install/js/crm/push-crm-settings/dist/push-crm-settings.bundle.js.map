{"version":3,"file":"push-crm-settings.bundle.js","sources":["../src/params-handling.js","../src/push-crm-settings.js","../src/index.js"],"sourcesContent":["import { Type } from \"main.core\";\n\nexport function requireClassOrNull(param: any, constructor: Function, paramName: string): ?Object\n{\n\tif (Type.isNil(param))\n\t{\n\t\treturn param;\n\t}\n\n\treturn requireClass(param, constructor, paramName);\n}\n\nexport function requireClass(param: any, constructor: Function, paramName: string): Object\n{\n\tif (param instanceof constructor)\n\t{\n\t\treturn param;\n\t}\n\n\tthrow new Error(`Expected ${paramName} be an instance of ${constructor.name}, got ${getType(param)} instead`);\n}\n\nexport function requireStringOrNull(param: any, paramName: string): ?string\n{\n\tif (Type.isStringFilled(param) || Type.isNil(param))\n\t{\n\t\treturn param;\n\t}\n\n\tthrow new Error(`Expected ${paramName} be either non-empty string or null, got ${getType(param)} instead`);\n}\n\nfunction getType(value: any): string\n{\n\tif (Type.isObject(value) && !Type.isPlainObject(value))\n\t{\n\t\treturn value?.constructor?.name || 'unknown';\n\t}\n\n\t// eslint-disable-next-line bitrix-rules/no-typeof\n\treturn typeof value;\n}\n","import { Menu, MenuItem, MenuItemOptions } from \"main.popup\";\nimport { SettingsController, Type as SortType } from \"crm.kanban.sort\";\nimport { Restriction } from \"crm.kanban.restriction\";\nimport { BaseEvent, EventEmitter } from \"main.core.events\";\nimport { Loc, Reflection, Text } from \"main.core\";\nimport { TodoNotificationSkipMenu } from \"crm.activity.todo-notification-skip-menu\";\nimport { Params } from \"./params\";\nimport { requireClass, requireClassOrNull, requireStringOrNull } from \"./params-handling\";\n\nconst EntityType = Reflection.getClass('BX.CrmEntityType');\n\nconst CHECKED_CLASS = 'menu-popup-item-accept';\nconst NOT_CHECKED_CLASS = 'menu-popup-item-none';\n\n/**\n * @memberOf BX.Crm\n */\nexport class PushCrmSettings\n{\n\t#entityTypeId: number;\n\t#rootMenu: Menu;\n\t#targetItemId: ?string;\n\t#controller: ?SettingsController;\n\t#restriction: ?Restriction;\n\n\t#todoSkipMenu: TodoNotificationSkipMenu;\n\n\t#isSetSortRequestRunning: boolean = false;\n\n\tconstructor(params: Params)\n\t{\n\t\tthis.#entityTypeId = Text.toInteger(params.entityTypeId);\n\t\tif (EntityType && !EntityType.isDefined(this.#entityTypeId))\n\t\t{\n\t\t\tthrow new Error(`Provided entityTypeId is invalid: ${this.#entityTypeId}`);\n\t\t}\n\n\t\tthis.#rootMenu = requireClass(params.rootMenu, Menu, 'params.rootMenu');\n\n\t\tthis.#targetItemId = requireStringOrNull(params.targetItemId, 'params.targetItemId');\n\n\t\tthis.#controller = requireClassOrNull(params.controller, SettingsController, 'params.controller');\n\t\tthis.#restriction = requireClassOrNull(params.restriction, Restriction, 'params.restriction');\n\n\t\tthis.#todoSkipMenu = new TodoNotificationSkipMenu({\n\t\t\tentityTypeId: this.#entityTypeId,\n\t\t\tselectedValue: requireStringOrNull(params.todoCreateNotificationSkipPeriod, 'params.todoCreateNotificationSkipPeriod'),\n\t\t});\n\n\t\tthis.#bindEvents();\n\t}\n\n\t#bindEvents(): void\n\t{\n\t\tconst onPopupShowHandler = (event: BaseEvent) => {\n\t\t\tconst popup = event.getTarget();\n\t\t\tif (popup.getId() !== this.#rootMenu.getId())\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// process this event with the intended target only once\n\t\t\tEventEmitter.unsubscribe(EventEmitter.GLOBAL_TARGET, 'onPopupShow', onPopupShowHandler);\n\n\t\t\tif (!this.#shouldShowPushCrmSettings())\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst item: MenuItem = this.#rootMenu.addMenuItem(\n\t\t\t\t{\n\t\t\t\t\ttext: Loc.getMessage('CRM_PUSH_CRM_SETTINGS_MENU_ITEM_TEXT'),\n\t\t\t\t\t// if we provide no items, submenu will not be created. and onShow will never be emitted.\n\t\t\t\t\titems: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tid: 'stub',\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\tthis.#targetItemId,\n\t\t\t);\n\n\t\t\titem.subscribe('SubMenu:onShow', (event) => {\n\t\t\t\tconst target: MenuItem = event.getTarget();\n\n\t\t\t\tfor (const itemOptionsToAdd of this.#getItems())\n\t\t\t\t{\n\t\t\t\t\ttarget.getSubMenu()?.addMenuItem(itemOptionsToAdd);\n\t\t\t\t}\n\n\t\t\t\ttarget.getSubMenu()?.removeMenuItem('stub');\n\t\t\t});\n\t\t};\n\n\t\tEventEmitter.subscribe(EventEmitter.GLOBAL_TARGET, 'onPopupShow', onPopupShowHandler);\n\t}\n\n\t#shouldShowPushCrmSettings(): boolean\n\t{\n\t\treturn this.#getItems().length > 0;\n\t}\n\n\t#getItems(): MenuItemOptions[]\n\t{\n\t\tconst items = [];\n\n\t\tif (this.#shouldShowLastActivitySortToggle())\n\t\t{\n\t\t\titems.push(this.#getLastActivitySortToggle());\n\t\t}\n\n\t\tif (this.#shouldShowTodoSkipMenu())\n\t\t{\n\t\t\titems.push(...this.#todoSkipMenu.getItems());\n\t\t}\n\n\t\treturn items;\n\t}\n\n\t#shouldShowLastActivitySortToggle(): boolean\n\t{\n\t\treturn !!(\n\t\t\tthis.#controller?.getCurrentSettings().isTypeSupported(SortType.BY_LAST_ACTIVITY_TIME)\n\t\t\t&& this.#restriction?.isSortTypeChangeAvailable()\n\t\t);\n\t}\n\n\t#getLastActivitySortToggle(): MenuItemOptions\n\t{\n\t\treturn {\n\t\t\ttext: Loc.getMessage('CRM_PUSH_CRM_SETTINGS_SORT_TOGGLE_TEXT'),\n\t\t\tdisabled: this.#isSetSortRequestRunning,\n\t\t\tclassName: this.#isLastActivitySortEnabled() ? CHECKED_CLASS : NOT_CHECKED_CLASS,\n\t\t\tonclick: this.#handleLastActivitySortToggleClick.bind(this),\n\t\t};\n\t}\n\n\t#isLastActivitySortEnabled(): boolean\n\t{\n\t\treturn this.#controller?.getCurrentSettings().getCurrentType() === SortType.BY_LAST_ACTIVITY_TIME;\n\t}\n\n\t#handleLastActivitySortToggleClick(event: PointerEvent, item: MenuItem): void\n\t{\n\t\titem.getMenuWindow()?.getRootMenuWindow()?.close();\n\t\titem.disable();\n\n\t\tif (this.#isSetSortRequestRunning)\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\tthis.#isSetSortRequestRunning = true;\n\n\t\tconst settings = this.#controller.getCurrentSettings();\n\n\t\tlet newSortType: string;\n\t\tif (settings.getCurrentType() === SortType.BY_LAST_ACTIVITY_TIME)\n\t\t{\n\t\t\t// first different type\n\t\t\tnewSortType = settings.getSupportedTypes().find(sortType => sortType !== SortType.BY_LAST_ACTIVITY_TIME);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnewSortType = SortType.BY_LAST_ACTIVITY_TIME;\n\t\t}\n\n\t\tthis.#controller.setCurrentSortType(newSortType)\n\t\t\t.then(() => {})\n\t\t\t.catch(() => {})\n\t\t\t.finally(() => {\n\t\t\t\tthis.#isSetSortRequestRunning = false;\n\t\t\t\titem.enable();\n\t\t\t})\n\t\t;\n\t}\n\n\t#shouldShowTodoSkipMenu(): boolean\n\t{\n\t\tlet allowedTypes = [];\n\t\tif (EntityType)\n\t\t{\n\t\t\tallowedTypes = [EntityType.enumeration.deal];\n\t\t}\n\n\t\treturn allowedTypes.includes(this.#entityTypeId);\n\t}\n}\n","import { Reflection } from \"main.core\";\n\nimport { PushCrmSettings } from \"./push-crm-settings\";\n\nconst namespace = Reflection.namespace('BX.Crm');\nnamespace.PushCrmSettings = PushCrmSettings;\n\nexport {\n\tPushCrmSettings,\n};\n"],"names":["requireClassOrNull","param","constructor","paramName","Type","isNil","requireClass","Error","name","getType","requireStringOrNull","isStringFilled","value","isObject","isPlainObject","EntityType","Reflection","getClass","CHECKED_CLASS","NOT_CHECKED_CLASS","PushCrmSettings","params","Text","toInteger","entityTypeId","isDefined","rootMenu","Menu","targetItemId","controller","SettingsController","restriction","Restriction","TodoNotificationSkipMenu","selectedValue","todoCreateNotificationSkipPeriod","onPopupShowHandler","event","popup","getTarget","getId","EventEmitter","unsubscribe","GLOBAL_TARGET","item","addMenuItem","text","Loc","getMessage","items","id","subscribe","target","itemOptionsToAdd","getSubMenu","removeMenuItem","length","push","getItems","getCurrentSettings","isTypeSupported","SortType","BY_LAST_ACTIVITY_TIME","isSortTypeChangeAvailable","disabled","className","onclick","bind","getCurrentType","getMenuWindow","getRootMenuWindow","close","disable","settings","newSortType","getSupportedTypes","find","sortType","setCurrentSortType","then","catch","finally","enable","allowedTypes","enumeration","deal","includes","namespace"],"mappings":"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"}